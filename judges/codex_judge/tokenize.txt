API Documentation for Tokenize library
======================================

1) TOKEN_FILE
-------------
Token library uses standard stdio files and build simple buffering over it.
You are supposed to use TOKEN_FILE instead of simple FILE if you want to read
tokens from it.

File is opened by TOKEN_FILE *tfopen(const char *fileName); function. It is used
almost the same way as the fopen function is. It returns pointer to newly
allocated TOKEN_FILE structure. If error occured, the NULL is returned.
If you would like to use tfopen with stdin pass a NULL parameter instead of
regular fileName. However it is strongly recomended to use the TOKEN_FILE only
with regular files.

When you finish your work with TOKEN_FILE, you should close it using
void tfclose(TOKEN_FILE *tf); function. It acts as a regular fclose and releases
the TOKEN_FILE structure.


2) TOKEN
--------
Token is structure that encapsulates rellocable string. Structure it self has
following members:

struct s_token {
	char *str;		// The token string (zero-ended).
	int len;		// Length of the token string.
	int capacity;	// Capacity of the str array.
	int newline;	// Newline flag (explained below).
};

All members should be considered read only and can be modified only using
designated functions.

Berfore you start manipulating with token, you must initialize the structure
using int initializeToken(TOKEN *token, int capacity); function. After your job
is done you may release token's allocated memory by 
void freeToken(TOKEN *token); function, however it releases only internal *str
block (not the structure itself). 

Most important function is int fgetToken(TOKEN_FILE *tf, TOKEN *token);. It
reads new token from TOKEN_FILE and stores it into TOKEN structure. If TOK_OK
result is given by the function, everything went by the book and new token
awaits you in the structure. Otherwise something went wrong and no token is
available. TOK_EOF means that the end of file was reached and no more tokens
will be available. Any other error is fatal and you'd better terminate your
application with error code.

Usage code sample:
	// Initialize.
	TOKEN_FILE *tf = tfopen("file_name");
	if (!tf) error(...);

	TOKEN token;
	initializeToken(&token, 31);
	
	// Read tokens in cycle.
	int res = fgetToken(tf, &token);
	while(res1 == TOK_OK) {
		... do something with the token ...
		res = fgetToken(tf, &token);
	}
	
	// Clean up structures.
	freeToken(&token);
	tfclose(tf);
	
	if (res == TOK_EOF) error(...);
	...


3) TOKEN conversions
--------------------
Two tokens can be easily compared by int tokensEquals(TOKEN *token1, TOKEN
*token2); function. It returns nonzero value if token1 equals token2. Otherwise
it returns 0.

There are also several functions that can convert token to other data formats.
If the conversion is successfull, the TOK_OK is returned (otherwise en error
code is returned).

The conversion functions are:
 
int tokenToDouble(TOKEN *token, double *x);
int tokenToLongDouble(TOKEN *token, long double *x);
int tokenToLong(TOKEN *token, long *x);
int tokenToULong(TOKEN *token, unsigned long *x);


4) The End
----------
That's pretty much it. Enjoy this library and handle it with care :D
