var annotated_dup =
[
    [ "archivate_task", "classarchivate__task.html", "classarchivate__task" ],
    [ "archivator", "classarchivator.html", null ],
    [ "archive_exception", "classarchive__exception.html", "classarchive__exception" ],
    [ "broker_connection", "classbroker__connection.html", "classbroker__connection" ],
    [ "cache_manager", "classcache__manager.html", "classcache__manager" ],
    [ "config_error", "classconfig__error.html", "classconfig__error" ],
    [ "connection_proxy", "classconnection__proxy.html", "classconnection__proxy" ],
    [ "cp_task", "classcp__task.html", "classcp__task" ],
    [ "eval_request", "structeval__request.html", "structeval__request" ],
    [ "eval_response", "structeval__response.html", "structeval__response" ],
    [ "external_task", "classexternal__task.html", "classexternal__task" ],
    [ "extract_task", "classextract__task.html", "classextract__task" ],
    [ "fake_task", "classfake__task.html", "classfake__task" ],
    [ "fetch_task", "classfetch__task.html", "classfetch__task" ],
    [ "file_manager", "classfile__manager.html", "classfile__manager" ],
    [ "file_manager_base", "classfile__manager__base.html", "classfile__manager__base" ],
    [ "fileman_config", "structfileman__config.html", "structfileman__config" ],
    [ "fm_exception", "classfm__exception.html", "classfm__exception" ],
    [ "http_manager", "classhttp__manager.html", "classhttp__manager" ],
    [ "isoeval_core", "classisoeval__core.html", "classisoeval__core" ],
    [ "isolate_sandbox", "classisolate__sandbox.html", "classisolate__sandbox" ],
    [ "job", "classjob.html", "classjob" ],
    [ "job_evaluator", "classjob__evaluator.html", "classjob__evaluator" ],
    [ "job_exception", "classjob__exception.html", "classjob__exception" ],
    [ "job_receiver", "classjob__receiver.html", "classjob__receiver" ],
    [ "log_config", "structlog__config.html", "structlog__config" ],
    [ "message_origin", "structmessage__origin.html", "structmessage__origin" ],
    [ "mkdir_task", "classmkdir__task.html", "classmkdir__task" ],
    [ "rename_task", "classrename__task.html", "classrename__task" ],
    [ "rm_task", "classrm__task.html", "classrm__task" ],
    [ "sandbox_base", "classsandbox__base.html", "classsandbox__base" ],
    [ "sandbox_exception", "classsandbox__exception.html", "classsandbox__exception" ],
    [ "sandbox_limits", "structsandbox__limits.html", "structsandbox__limits" ],
    [ "task_base", "classtask__base.html", "classtask__base" ],
    [ "task_compare", "classtask__compare.html", "classtask__compare" ],
    [ "task_exception", "classtask__exception.html", "classtask__exception" ],
    [ "task_results", "structtask__results.html", "structtask__results" ],
    [ "worker_config", "classworker__config.html", "classworker__config" ]
];